@page "/"
@layout Layout.MainLayout
@using Models.ViewModels
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

@if (!string.IsNullOrEmpty(imageDataUrl))
{   
    <div class="image-data-container">
        <img src="@imageDataUrl" alt="Image" class="user-card"/>
        <div class="data-container">
            <span class="user-info-card">race</span>
            <span class="user-info-card">age</span>
            <span class="user-info-card">gender</span>
            <span class="user-info-card">mood</span>
            <span class="user-info-card">geo</span>
            <span class="user-info-card">some</span>
            <span class="user-info-card">else</span>
            <span class="user-info-card">words</span>
            <span class="user-info-card">written</span>
        </div>
    </div>
}

<div class="home-container">
    @if(!loading)
    {
        <p class="text-handler">Upload your photo or video...</p>
    }   
    <div class="upload-button-container">

        @if(loading)
        {
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" />
            </button>
        }
    </div>
</div>

@code {
    private byte[]? imageBytes;
    private bool loading = false;
    private string? imageSource;
    private string? data;
    private string imageDataUrl = string.Empty;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        loading = true;
        var file = e.File;

        if(file is null)
        {
            loading = false;
            return;
        }

        if (!file.ContentType.StartsWith("image"))
        {
            loading = false;
            return;
        }

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        string mimeType = file.ContentType;
        imageDataUrl = $"data:{mimeType};base64,{Convert.ToBase64String(buffer)}";
        StateHasChanged();

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            imageBytes = memoryStream.ToArray();
            imageSource = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
        }

        var values = new Dictionary<string, bool>
        {
            {"age", true}, {"emotion", true}, {"gender", true}, {"race", true}
        };
        var jsonContent = JsonSerializer.Serialize(new AnalyzeViewModel { B64img = imageSource, Actions = values } );
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        using (var client = new HttpClient())
        {
            try
            {
                var response = await client.PostAsync(apiSettings.ApiUrl + apiSettings.Analyze, content);
                if (!response.IsSuccessStatusCode)
                {
                    loading = false;
                    return; 
                }
                    
                data = await response.Content.ReadAsStringAsync();
                loading = false;
            }
            catch
            {
                loading = false;
                return;
            }
        }
    }
}   