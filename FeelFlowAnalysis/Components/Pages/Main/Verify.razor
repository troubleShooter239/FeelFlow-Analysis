@page "/verify"
@layout Layout.MainLayout
@rendermode InteractiveServer

@using FeelFlowAnalysis.Models.ViewModels

@inject IOptions<Settings> Settings

<PageTitle>Verify</PageTitle>

@if (!string.IsNullOrEmpty(imageDataUrl) && data is not null)
{
    <div class="image-data-container">
        <img src="@imageDataUrl" alt="Image" class="user-card"/>
        <div class="data-container">
            <span class="user-info-card">race</span>
            <span class="user-info-card">age</span>
            <span class="user-info-card">gender</span>
            <span class="user-info-card">mood</span>
            <span class="user-info-card">geo</span>
            <span class="user-info-card">some</span>
            <span class="user-info-card">else</span>
            <span class="user-info-card">words</span>
            <span class="user-info-card">written</span>
        </div>
    </div>
}

<div class="home-container">
    
    @if(!_loading)
    {
        <p class="text-handler">Upload your photo's</p>
    }
    <div class="upload-button-container">
        @if (_imageBytes1 is not null && _imageBytes2 is not null)
        {
        
        }
        @if(loading)
        {
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        }
        @* @if (data is not null)
        {
            <p>@data</p>
        } *@
        <button class="button upload-button" style="position: relative;">
            Upload
            <InputFile OnChange="LoadFile" accept="image/*" class="input-file" multiple />
        </button>
        else
        {
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" />
            </button>
        }
    </div>
</div>

@code {
    private byte[]? _imageBytes1;
    private byte[]? _imageBytes2;
    private List<string>? _imagesSource;
    private string? data;
    private string rModelName = string.Empty;
    private string distanceMetric = string.Empty;
    private bool _loading = false;
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _imageBytes1 = null;
        _imageBytes2 = null;
        _imagesSource = null;
        _loading = true;

        var files = e.GetMultipleFiles(2);

        if(files is null)
        {
            _loading = false;
            return;
        }

        using (var memoryStream1 = new MemoryStream())
        {
            await files[0].OpenReadStream().CopyToAsync(memoryStream1);
            _imageBytes1 = memoryStream1.ToArray();
        }

        using (var memoryStream2 = new MemoryStream())
        {
            await files[1].OpenReadStream().CopyToAsync(memoryStream2);
            _imageBytes2 = memoryStream2.ToArray();
        }
        if (!file.ContentType.StartsWith("image"))
        {
            loading = false;
            return;
        }

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        string mimeType = file.ContentType;
        imageDataUrl = $"data:{mimeType};base64,{Convert.ToBase64String(buffer)}";
        StateHasChanged();

        using (var memoryStream = new MemoryStream())
 
        var jsonContent = JsonSerializer.Serialize(new VerifyViewModel 
        { 
            B64img1 = $"data:{files[0].ContentType};base64,{Convert.ToBase64String(_imageBytes1)}", 
            B64img2 = $"data:{files[1].ContentType};base64,{Convert.ToBase64String(_imageBytes2)}",
            RModelName = rModelName,
            DistanceMetric = distanceMetric
        });
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        using (var client = new HttpClient())
        {
            try
            {
                var response = await client.PostAsync(Settings.Value.Api.Verify, content);
                if (!response.IsSuccessStatusCode)
                {
                    loading = false;
                    return;
                }

                data = await response.Content.ReadAsStringAsync();
            }
            catch
            {
                loading = false;
                return;
            }
        }
    }
}   