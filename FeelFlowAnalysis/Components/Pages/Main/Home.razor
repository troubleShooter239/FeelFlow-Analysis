@page "/"
@layout Layout.MainLayout
@rendermode InteractiveServer

@using Microsoft.Extensions.Logging;
@using System.IO;
@using Models.ViewModels
@using Models.DTO.Analyze

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Home> logger
@inject HttpClient httpClient
@inject Microsoft.Extensions.Options.IOptions<Settings> Settings

<PageTitle>Home</PageTitle>

@if (!string.IsNullOrEmpty(_imageSource) && _data is not null)
{   
    <div>
        <div class="user-card-container">
            <img src="@_imageSource" alt="Image" class="user-card"/>
        </div>
        <div class="data-container">
            @for (int i = 0; i < _data.Length; i++)
            {
                <span class="user-info-card">@(i + 1) face:</span>
                foreach (var property in typeof(AnalyzeDTO).GetProperties())
                {
                    <span class="user-info-card">@property.Name: @property.GetValue(_data[i])</span>
                }
            }
        </div>
    </div>
}

<div class="home-container">
    @if (_errorMessage is not null)
    {
        <p>@_errorMessage</p>
    }
    @if(!_loading)
    {
        <p class="text-handler">Upload your photo...</p>
        <div class="upload-button-container">
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" />
            </button>
        </div>
    }   
    else
    {
        <div class="upload-button-container">
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Dictionary<string, bool> _actions = new()
    { {"age", true}, {"emotion", true}, {"gender", true}, {"race", true} };
    private bool _loading = false;
    private AnalyzeDTO[]? _data;
    private string? _errorMessage;
    private string? _imageSource;
  
    private void ClearData()
    {
        _imageSource = null;
        _loading = true;
        _errorMessage = null;
        _data = null;
    }
  
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        ClearData();

        var file = e.File;

        if(file is null || !file.ContentType.StartsWith("image"))
        {
            _loading = false;
            return;
        }

        if (file.Size > Settings.Value.Api.MaxFileSize)
        {
            _loading = false;
            _errorMessage = "File size > 5MB.";
            return;
        }

        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: Settings.Value.Api.MaxFileSize)
                .CopyToAsync(memoryStream);
            _imageSource = $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _loading = false;
            logger.LogError(ex.Message);
            return;
        }

        var jsonContent = JsonSerializer.Serialize(new AnalyzeViewModel 
        { 
            B64img = _imageSource, 
            Actions = _actions
        });
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        try
        {
            var response = await httpClient.PostAsync(Settings.Value.Api.Analyze, content);
            response.EnsureSuccessStatusCode();
            
            var serialized_data = await response.Content.ReadAsStringAsync();
            
            logger.LogInformation("API response:\n" + serialized_data);

            _data = JsonSerializer.Deserialize<AnalyzeDTO[]>(serialized_data);
        }
        catch(Exception ex)
        {
            logger.LogError(ex.Message);
            return;
        }
        finally
        {
            _loading = false;
        }
    }
}   