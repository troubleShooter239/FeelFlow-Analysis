@page "/verify"
@layout Layout.MainLayout
@rendermode InteractiveServer

@using FeelFlowAnalysis.Models.ViewModels
@using Models.DTO.Verify

@inject HttpClient httpClient
@inject ILogger<Verify> logger
@inject Microsoft.Extensions.Options.IOptions<Settings> Settings

<PageTitle>Verify</PageTitle>

@if (!string.IsNullOrEmpty(_imageSource1) && !string.IsNullOrEmpty(_imageSource2) && _data is not null)
{
    <div>
        <div class="user-card-container">
            <img src="@_imageSource1" alt="Image" class="user-card"/>
            <img src="@_imageSource2" alt="Image" class="user-card"/> 
        </div>
        <div class="data-container">
            @foreach (var property in typeof(VerifyDTO).GetProperties())
            {
                <span class="user-info-card">@property.Name: @property.GetValue(_data)</span>
            }
        </div>
    </div>
}

<div class="home-container">
    @if(!_loading)
    {
        <p class="text-handler">Upload your photo's</p>
    }
    <div class="upload-button-container">
        @if(_loading)
        {
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" multiple />
            </button>
        }
    </div>
</div>

@code {
    private string? _imageSource1;
    private string? _imageSource2;
    private VerifyDTO? _data;
    private string _rModelName = string.Empty;
    private string _distanceMetric = string.Empty;
    private bool _loading = false;
    private List<IBrowserFile> _loadedFiles = [];
    private string? _errorMessage;
    
    private void ClearData()
    {
        _imageSource1 = null;
        _imageSource2 = null;
        _loading = true;
        _loadedFiles.Clear();
        _errorMessage = null;
    }
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        ClearData();

        if (e.FileCount != 2)
        {
            _loading = false;
            return;
        }

        foreach (IBrowserFile file in e.GetMultipleFiles(2))
        {
            try
            {
                if (file.Size > Settings.Value.Api.MaxFileSize)
                {
                    _errorMessage = "File size > 5MB.";
                    throw new Exception("File size is too big.");
                }
                _loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                logger.LogError($"File: {file.Name} Error: {ex.Message}");
                _loading = false;
                return;
            }
        }

        if( _loadedFiles[0] is null || _loadedFiles[1] is null)
        {
            _loading = false;
            return;
        }

        try
        {
            using (var memoryStream1 = new MemoryStream())
            {
                await _loadedFiles[0].OpenReadStream(maxAllowedSize: Settings.Value.Api.MaxFileSize)
                    .CopyToAsync(memoryStream1);
                _imageSource1 = $"data:{_loadedFiles[0].ContentType};base64,{Convert.ToBase64String(memoryStream1.ToArray())}";
            }

            using (var memoryStream2 = new MemoryStream())
            {
                await _loadedFiles[1].OpenReadStream(maxAllowedSize: Settings.Value.Api.MaxFileSize)
                    .CopyToAsync(memoryStream2);
                _imageSource2 = $"data:{_loadedFiles[1].ContentType};base64,{Convert.ToBase64String(memoryStream2.ToArray())}";
            }

            StateHasChanged();
        }
        catch(Exception ex)
        {
            logger.LogError(ex.Message);
            logger.LogError(ex.StackTrace);
            _loading = false;
            return;
        }
        var jsonContent = JsonSerializer.Serialize(new VerifyViewModel 
        { 
            B64img1 = _imageSource1, 
            B64img2 = _imageSource2,
            RModelName = _rModelName,
            DistanceMetric = _distanceMetric
        });
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        try
        {
            var response = await httpClient.PostAsync(Settings.Value.Api.Verify, content);
            response.EnsureSuccessStatusCode();

            var serialized_data = await response.Content.ReadAsStringAsync();

            logger.LogInformation("API response:\n" + serialized_data);

            _data = JsonSerializer.Deserialize<VerifyDTO>(serialized_data);
        }
        catch(Exception ex)
        {
            logger.LogError(ex.Message);
        }
        finally
        {
            _loading = false;
        }
    }
}   