@page "/verify"
@layout Layout.MainLayout
@rendermode InteractiveServer

@using FeelFlowAnalysis.Models.ViewModels
@using Models.DTO.Verify

@inject HttpClient httpClient
@inject ILogger<Verify> logger
@inject Microsoft.Extensions.Options.IOptions<Settings> Settings

<PageTitle>Verify</PageTitle>

@if (!string.IsNullOrEmpty(_imageSource1) && !string.IsNullOrEmpty(_imageSource2) && _data is not null)
{
    <div class="image-data-container">
        <img src="@_imageSource1" alt="Image" class="user-card"/>
        <img src="@_imageSource2" alt="Image" class="user-card"/>
        <div class="data-container">
            <span class="user-info-card">race</span>
            <span class="user-info-card">age</span>
            <span class="user-info-card">gender</span>
            <span class="user-info-card">mood</span>
            <span class="user-info-card">geo</span>
            <span class="user-info-card">some</span>
            <span class="user-info-card">else</span>
            <span class="user-info-card">words</span>
            <span class="user-info-card">written</span>
        </div>
    </div>
}

<div class="home-container">
    @if(!_loading)
    {
        <p class="text-handler">Upload your photo's</p>
    }
    <div class="upload-button-container">
        @if(_loading)
        {
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" />
            </button>
        }
    </div>
</div>

@code {
    private string? _imageSource1;
    private string? _imageSource2;
    private VerifyDTO? _data;
    private string _rModelName = string.Empty;
    private string _distanceMetric = string.Empty;
    private bool _loading = false;
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _imageSource1 = null;
        _imageSource2 = null;
        _loading = true;

        var files = e.GetMultipleFiles(2);

        if(files is null)
        {
            _loading = false;
            return;
        }

        byte[]? _imageBytes1;
        using (var memoryStream1 = new MemoryStream())
        {
            await files[0].OpenReadStream().CopyToAsync(memoryStream1);
            _imageBytes1 = memoryStream1.ToArray();
            _imageSource1 = $"data:{files[0].ContentType};base64,{Convert.ToBase64String(_imageBytes1)}";
        }

        byte[]? _imageBytes2;
        using (var memoryStream2 = new MemoryStream())
        {
            await files[1].OpenReadStream().CopyToAsync(memoryStream2);
            _imageBytes2 = memoryStream2.ToArray();
            _imageSource2 = $"data:{files[1].ContentType};base64,{Convert.ToBase64String(_imageBytes2)}";
        }

        StateHasChanged();
 
        var jsonContent = JsonSerializer.Serialize(new VerifyViewModel 
        { 
            B64img1 = _imageSource1, 
            B64img2 = _imageSource2,
            RModelName = _rModelName,
            DistanceMetric = _distanceMetric
        });
        var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
        try
        {
            var response = await httpClient.PostAsync(Settings.Value.Api.Verify, content);
            response.EnsureSuccessStatusCode();

            var serialized_data = await response.Content.ReadAsStringAsync();

            logger.LogInformation("API response:\n" + serialized_data);

            _data = JsonSerializer.Deserialize<VerifyDTO>(serialized_data);
        }
        catch(Exception ex)
        {
            logger.LogError(ex.Message);
        }
        finally
        {
            _loading = false;
        }
    }
}   