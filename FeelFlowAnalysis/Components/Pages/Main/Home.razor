@page "/"
@layout Layout.MainLayout
@using Models.ViewModels
@using Models.DTO.Analyze
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>
<div class="home-container">
    @if (imageBytes is not null)
    {
        // Add img and css
    }
    @if (data is not null)
    {
        foreach(var face in data)
        {
            foreach(var info in face)
            {
                <p>@info.Key.ToString()</p>
            }
        }
    }
    @if(!loading)
    {
        <p class="text-handler">Upload your photo or video...</p>
    }   
    <div class="upload-button-container">

        @if(loading)
        {
            <div class="spinner-wrapper">
                <div class="spinner">
                    <div class="sk-folding-cube">
                        <div class="sk-cube1 sk-cube"></div>
                        <div class="sk-cube2 sk-cube"></div>
                        <div class="sk-cube4 sk-cube"></div>
                        <div class="sk-cube3 sk-cube"></div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <button class="button upload-button" style="position: relative;">
                Upload
                <InputFile OnChange="LoadFile" accept="image/*" class="input-file" />
            </button>
        }
    </div>
</div>

@code {
    private byte[]? imageBytes;
    private bool loading = false;
    private List<AnalyzeDTO>? data;
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        data = null;
        loading = true;
        var file = e.File;

        if(file is null)
        {
            loading = false;
            return;
        }

        if (!file.ContentType.StartsWith("image"))
        {
            loading = false;
            return;
        }

        using (var memoryStream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(memoryStream);
            imageBytes = memoryStream.ToArray();
        }

        var values = new Dictionary<string, bool>
        {
            {"age", true}, {"emotion", true}, {"gender", true}, {"race", true}
        };
        var jsonContent = JsonSerializer.Serialize(
            new AnalyzeViewModel 
            { 
                B64img = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}", 
                Actions = values 
            } 
        );
        var content = new StringContent(
            jsonContent, Encoding.UTF8, "application/json"
        );
        using (var client = new HttpClient())
        {
            try
            {
                var response = await client.PostAsync(
                    apiSettings.ApiUrl + apiSettings.Analyze, content
                );
                if (!response.IsSuccessStatusCode)
                {
                    loading = false;
                    return; 
                }
                
                var serializedData = await response.Content.ReadAsStringAsync();
                Console.WriteLine(serializedData);
                data = await JsonSerializer.DeserializeAsync<List<AnalyzeDTO>>(
                    new System.IO.MemoryStream(Encoding.UTF8.GetBytes(serializedData!))
                );
                loading = false;
            }
            catch(Exception exception)
            {
                Console.WriteLine(exception.Message);
                Console.WriteLine(exception.StackTrace);
                loading = false;
                return;
            }
        }
    }
}   